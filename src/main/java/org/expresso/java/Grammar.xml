<?xml version="1.0" encoding="UTF-8"?>

<expresso>
	<expression name="char">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<without classes="ignorable">
			<literal>&apos;</literal>
			<one-of>
				<literal field="value">&quot;</literal>
				<pattern field="value">[\x20-~]</pattern>
				<pattern field="value,escaped">\\[&apos;&quot;tnrbf]</pattern>
				<pattern field="value,escaped,unicode">\\u[0-9a-fA-F]{4}</pattern>
			</one-of>
			<literal>&apos;</literal>
		</without>
	</expression>
	<expression name="string">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<without classes="ignorable">
			<literal>&quot;</literal>
			<up-to field="value">
				<one-of>
					<literal>&quot;</literal>
					<literal>&#10;</literal>
				</one-of>
			</up-to>
			<literal>&quot;</literal>
		</without>
	</expression>
	<expression name="number">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<option>
			<literal field="neg">-</literal>
		</option>
		<without classes="ignorable">
			<one-of>
				<sequence field="decimal">
					<pattern field="integer">[1-9][_0-9]*</pattern>
					<literal>.</literal>
					<option>
						<pattern field="fraction">[0-9][_0-9]</pattern>
					</option>
				</sequence>
				<sequence field="decimal">
					<literal>.</literal>
					<pattern field="fraction">[0-9][_0-9]*</pattern>
				</sequence>
				<pattern field="integer">[1-9][_0-9]*</pattern>
				<literal field="integer">0</literal>
			</one-of>
			<option>
				<pattern>[eE]</pattern>
				<option>
					<literal field="exp-neg">-</literal>
				</option>
				<pattern field="exp">[1-9][_0-9]*</pattern>
			</option>
			<option>
				<pattern field="float-type">[fF]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern field="double-type">[dD]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="hex-int">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<without classes="ignorable">
			<literal field="hex">0x</literal>
			<pattern field="value">[_0-9a-fA-F]+</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
			</option>
			<forbid>
				<pattern>[_a-zA-Z0-9]</pattern>
			</forbid>
		</without>
	</expression>
	<expression name="octal-int">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<without classes="ignorable">
			<literal field="oct">0</literal>
			<pattern field="value">[_0-9]+</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="binary-int">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<without classes="ignorable">
			<literal field="binary">0b</literal>
			<pattern field="value">[_0-9]*</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="boolean">
		<one-of>
			<literal>true</literal>
			<literal>false</literal>
		</one-of>
	</expression>
	<expression name="null">
		<literal>null</literal>
	</expression>

	<!-- Ignorables -->
	<expression name="whitespace" class="ignorable">
		<pattern>\s+</pattern>
	</expression>
	<expression name="line-comment" class="ignorable">
		<without classes="ignorable">
			<literal>//</literal>
			<up-to field="content">
				<literal>&#10;</literal>
			</up-to>
			<literal>&#10;</literal>
		</without>
	</expression>
	<expression name="block-comment" class="ignorable">
		<literal>/*</literal>
		<without classes="ignorable">
			<up-to field="content">
				<literal>*/</literal>
			</up-to>
			<literal>*/</literal>
		</without>
	</expression>
	
	<!-- Blocks and block structures -->
	<expression name="block">
		<literal>{</literal>
		<repeat>
			<statement field="content" />
		</repeat>
		<literal>}</literal>
	</expression>
	<expression name="synchronized-block">
		<literal>synchronized</literal>
		<literal>(</literal>
		<result-producer field="sync-item" />
		<literal>)</literal>
		<block field="content" />
	</expression>
	<expression name="try-catch-finally">
		<literal>try</literal>
		<option>
			<literal>(</literal>
			<result-producer field="resource" />
			<repeat>
				<literal>;</literal>
				<result-producer field="resource" />
			</repeat>
			<option>
				<literal>;</literal>
			</option>
			<literal>)</literal>
		</option>
		<block field="try" />
		<repeat>
			<literal>catch</literal>
			<literal>(</literal>
			<statement field="catch-type" />
			<literal>)</literal>
			<block field="catch" />
		</repeat>
		<option>
			<literal>finally</literal>
			<block field="finally" />
		</option>
	</expression>
	<expression name="while-loop">
		<literal field="name">while</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<one-of>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="do-while-loop">
		<literal field="name">do</literal>
		<block field="content,pre-condition" />
		<literal>while</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<literal>;</literal>
	</expression>
	<expression name="for-loop">
		<literal field="name">for</literal>
		<literal>(</literal>
		<option>
			<statement-content field="init" />
			<repeat>
				<literal>,</literal>
				<statement-content field="init" />
			</repeat>
		</option>
		<literal>;</literal>
		<option>
			<result-producer field="condition" />
		</option>
		<literal>;</literal>
		<option>
			<assignable field="increment" />
			<repeat>
				<literal>,</literal>
				<statement-content field="increment" />
			</repeat>
		</option>
		<literal>)</literal>
		<one-of>
			<literal field="terminal">;</literal>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="enhanced-for-loop">
		<literal>for</literal>
		<literal>(</literal>
		<type field="type" />
		<identifier field="variable" />
		<literal>:</literal>
		<result-producer field="iterable" />
		<literal>)</literal>
		<one-of>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="if">
		<literal>if</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<one-of>
			<statement field="content" />
			<block field="content" />
		</one-of>
		<repeat>
			<literal>else</literal>
			<literal>if</literal>
			<literal>(</literal>
			<result-producer field="condition" />
			<literal>)</literal>
			<one-of>
				<statement field="content" />
				<block field="content" />
			</one-of>
		</repeat>
		<option>
			<literal field="terminal">else</literal>
			<one-of>
				<statement field="content" />
				<block field="content" />
			</one-of>
		</option>
	</expression>
	<expression name="switch">
		<literal>switch</literal>
		<literal>(</literal>
		<result-producer field="variable" />
		<literal>)</literal>
		<literal>{</literal>
		<repeat>
			<one-of>
				<option>
					<literal>case</literal>
					<result-producer field="case" />
				</option>
				<option>
					<literal field="default">default</literal>
				</option>
			</one-of>
			<literal>:</literal>
			<one-of>
				<block />
				<repeat>
					<statement />
				</repeat>
			</one-of>
		</repeat>
		<literal>}</literal>
	</expression>
	
	<!-- Types -->
	<expression name="identifier" class="assignable,result-producer">
		<pattern field="name">[_a-zA-Z][_a-zA-Z0-9]*</pattern>
	</expression>
	<expression name="primitive">
		<one-of field="primitive,type">
			<literal>void</literal>
			<literal>boolean</literal>
			<literal>true</literal>
			<literal>false</literal>
			<literal>char</literal>
			<literal>byte</literal>
			<literal>short</literal>
			<literal>int</literal>
			<literal>long</literal>
			<literal>float</literal>
			<literal>double</literal>
		</one-of>
	</expression>
	<expression name="basic-type" priority="998" class="type">
		<!-- Just documenting, this is in this order as opposed to having the repeat first because of var-args.  With the repeat first,
			var arg parameters were parsed with the repeat successful (identifier, then '.'), but the next identifier wasn't there, so the
			parsing failed.  This ordering fixes this problem. -->
		<identifier field="name,final-name" />
		<repeat>
			<literal>.</literal>
			<identifier field="name" />
		</repeat>
	</expression>
	<expression name="array-type" priority="998" class="type">
		<type />
		<repeat min="1" field="dimension">
			<literal>[</literal>
			<literal>]</literal>
		</repeat>
	</expression>
	<expression name="type-bound">
		<one-of>
			<literal>extends</literal>
			<literal>super</literal>
		</one-of>
		<type field="bound" />
	</expression>
	<expression name="wildcard-type" priority="998" class="type">
		<literal field="wild-card">?</literal>
		<option>
			<type-bound field="bound" />
		</option>
	</expression>
	<expression name="bounded-type" priority="998" class="type">
		<identifier field="name" />
		<type-bound field="bound" />
	</expression>
	<expression name="type-parameters">
		<literal>&lt;</literal>
		<option> <!-- This is optional for the diamond operator -->
			<type field="parameter" />
			<repeat>
				<literal>,</literal>
				<type field="parameter" />
			</repeat>
		</option>
		<literal>&gt;</literal>
	</expression>
	<expression name="generic-type" priority="998" class="type">
		<basic-type field="base" />
		<type-parameters field="parameters" />
	</expression>

	<!-- Control statements -->
	<expression name="statement">
		<option>
			<statement-content field="content" />
		</option>
		<literal>;</literal>
	</expression>
	<expression name="return">
		<literal>return</literal>
		<option>
			<result-producer field="value" />
		</option>
	</expression>
	<expression name="throw">
		<literal>throw</literal>
		<result-producer field="value" />
	</expression>
	
	<!-- Declarations -->
	<expression name="annotation-value">
		<one-of>
			<result-producer field="value" />
			<sequence>
				<literal>{</literal>
					<annotation-value field="value-element" />
					<repeat>
						<literal>,</literal>
						<annotation-value field="value-element" />
					</repeat>
				<literal>}</literal>
			</sequence>
		</one-of>
	</expression>
	<expression name="annotations">
		<repeat min="1">
			<literal>@</literal>
			<basic-type field="type" />
			<option>
				<literal>(</literal>
				<one-of>
					<annotation-value field="parameter-value" />
					<sequence>
						<identifier field="parameter-name" />
						<literal>=</literal>
						<annotation-value field="parameter-value" />
					</sequence>
					<repeat>
						<literal>,</literal>
						<annotation-value field="parameter-value" />
						<sequence>
							<identifier field="parameter-name" />
							<literal>=</literal>
							<annotation-value field="parameter-value" />
						</sequence>
					</repeat>
				</one-of>
				<literal>)</literal>
			</option>
		</repeat>
	</expression>
	<expression name="qualifier">
		<one-of>
			<literal>public</literal>
			<literal>protected</literal>
			<literal>private</literal>
			<literal>default</literal>
			<literal>abstract</literal>
			<literal>static</literal>
			<literal>final</literal>
			<literal>synchronized</literal>
		</one-of>
	</expression>
	<expression name="variable-declaration" class="declaration,assignable,statement-content">
		<option>
			<annotations field="annotations" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<type field="type" />
		<option>
			<literal field="var-args">...</literal>
		</option>
		<whitespace />
		<identifier field="name" />
	</expression>
	<expression name="method-declaration" class="declaration,statement-content">
		<option>
			<annotations field="annotations" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<option>
			<type field="type" />
			<whitespace />
		</option>
		<identifier field="name" />
		<literal>(</literal>
			<option>
				<variable-declaration field="parameter" />
				<repeat>
					<literal>,</literal>
					<variable-declaration field="parameter" />
				</repeat>
			</option>
		<literal>)</literal>
		<option>
			<literal>throws</literal>
			<type field="thrown" />
			<repeat>
				<literal>,</literal>
				<type field="thrown" />
			</repeat>
		</option>
		<option>
			<block field="body" />
		</option>
	</expression>
	<expression name="class-declaration" class="declaration,statement-content">
		<option>
			<annotations field="annotations" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<one-of>
			<literal>class</literal>
			<literal>interface</literal>
		</one-of>
		<whitespace />
		<identifier field="name" />
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<option>
			<literal>extends</literal>
			<repeat>
				<type field="extends" />
				<literal>,</literal>
			</repeat>
			<type field="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<type field="implements" />
				<literal>,</literal>
			</repeat>
			<type field="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<statement field="body-content" />
			</repeat>
		<literal>}</literal>
	</expression>
	<expression name="enum-declaration" class="declaration,statement-content">
		<option>
			<annotations field="annotations" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<literal>enum</literal>
		<whitespace />
		<identifier field="name" />
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<option>
			<literal>extends</literal> <!-- Not really valid on an enum, but we'll catch it in validation -->
			<repeat>
				<type field="extends" />
				<literal>,</literal>
			</repeat>
			<type field="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<type field="implements" />
				<literal>,</literal>
			</repeat>
			<type field="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<identifier field="enum-constant" />
			</repeat>
			<option>
				<literal>;</literal>
			</option>
			<repeat>
				<statement field="body-content" />
			</repeat>
		<literal>}</literal>
	</expression>
	<expression name="type-import" class="import">
		<literal>import</literal>
		<whitespace />
		<basic-type field="type" />
		<option>
			<literal field="wildcard">.*</literal>
		</option>
		<literal>;</literal>
	</expression>
	<expression name="static-import" class="import">
		<literal>import</literal>
		<whitespace />
		<literal>static</literal>
		<whitespace />
		<basic-type field="type" />
		<option>
			<literal field="wildcard">.*</literal>
		</option>
		<literal>;</literal>
	</expression>
	<expression name="java-file">
		<option>
			<literal>package</literal>
			<sequence field="package">
				<repeat>
					<identifier />
					<literal>.</literal>
				</repeat>
					<identifier />
			</sequence>
			<literal>;</literal>
		</option>
		<repeat>
			<import field="import" />
		</repeat>
		<repeat min="1">
			<class-declaration field="class" />
		</repeat>
	</expression>
	
	<!-- Normal operators -->
	<expression name="constructor" class="statement-content,result-producer"> <!-- Invocation, not declaration -->
		<literal>new</literal>
		<whitespace />
		<type field="type" />
		<literal>(</literal>
			<option>
				<repeat>
					<result-producer field="parameter" />
					<literal>,</literal>
				</repeat>
				<result-producer field="parameter" />
			</option>
		<literal>)</literal>
		<option>
			<block field="anonymous-body" />
		</option>
	</expression>
	<expression name="lambda" class="statement-content,result-producer">
		<one-of>
			<identifier field="parameter-name" />
			<sequence>
				<literal>(</literal>
				<option>
					<one-of>
						<sequence>
							<repeat>
								<type field="parameter-type" />
								<identifier field="parameter-name" />
								<literal>,</literal>
							</repeat>
							<type field="parameter-type" />
							<identifier field="parameter-name" />
						</sequence>
						<sequence>
							<repeat>
								<identifier field="parameter-name" />
								<literal>,</literal>
							</repeat>
							<identifier field="parameter-name" />
						</sequence>
					</one-of>
				</option>
				<literal>)</literal>
			</sequence>
		</one-of>
		<literal>-&gt;</literal>
		<one-of>
			<block field="body" />
			<result-producer field="value" />
		</one-of>
	</expression>
	<expression name="array-initializer" class="statement-content,result-producer">
		<literal>new</literal>
		<whitespace />
		<type field="type" />
		<repeat min="1">
			<literal>[</literal>
			<result-producer field="size" />
			<literal>]</literal>
		</repeat>
		<option>
			<literal field="valueSet">{</literal>
			<option>
				<repeat>
					<result-producer field="element" />
					<literal>,</literal>
				</repeat>
				<result-producer field="element" />
			</option>
			<literal>}</literal>
		</option>
	</expression>
	<expression name="assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="add-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">+=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="subtract-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">-=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="multiply-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">*=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="divide-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">/=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="modulo-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">%=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="or-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">|=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="and-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">&amp;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="xor-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">^=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="left-shift-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">&lt;&lt;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="right-shift-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">&gt;&gt;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="unsigned-right-shift-assign" priority="100" class="assignment,binary,statement-content,result-producer">
		<assignable field="variable" />
		<literal field="name">&gt;&gt;&gt;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="conditional" priority="110" class="ternary,statement-content,result-producer">
		<result-producer field="condition" />
		<literal>?</literal>
		<result-producer field="affirmative" />
		<literal>:</literal>
		<result-producer field="negative" />
	</expression>
	<expression name="or2" priority="120" class="logical,binary,result-producer">
		<result-producer field="left" />
		<literal field="name">||</literal>
		<result-producer field="right" />
	</expression>
	<expression name="and2" priority="130" class="logical,binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&amp;&amp;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="or1" priority="140" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">|</literal>
		<result-producer field="right" />
	</expression>
	<expression name="xor" priority="150" class="logical,binary,result-producer">
		<result-producer field="left" />
		<literal field="name">^</literal>
		<result-producer field="right" />
	</expression>
	<expression name="and1" priority="160" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&amp;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="equal" priority="170" class="logical,binary,result-producer">
		<result-producer field="left" />
		<literal field="name">==</literal>
		<result-producer field="right" />
	</expression>
	<expression name="not-equal" priority="170" class="logical,binary,result-producer">
		<result-producer field="left" />
		<literal field="name">!=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="instanceof" priority="180" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">instanceof</literal>
		<result-producer field="right" />
	</expression>
	<expression name="less-equal" priority="180" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&lt;=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="less" priority="180" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&lt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="greater-equal" priority="180" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&gt;=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="greater" priority="180" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="left-shift" priority="190" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&lt;&lt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="right-shift" priority="190" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&gt;&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="unsigned-right-shift" priority="190" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">&gt;&gt;&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="add" priority="200" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">+</literal>
		<result-producer field="right" />
	</expression>
	<expression name="subtract" priority="200" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">-</literal>
		<result-producer field="right" />
	</expression>
	<expression name="multiply" priority="210" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">*</literal>
		<result-producer field="right" />
	</expression>
	<expression name="divide" priority="210" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">/</literal>
		<result-producer field="right" />
	</expression>
	<expression name="modulo" priority="210" class="binary,result-producer">
		<result-producer field="left" />
		<literal field="name">%</literal>
		<result-producer field="right" />
	</expression>
	<expression name="posit" priority="220" class="unary,result-producer">
		<literal field="name">+</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="negate" priority="220" class="unary,result-producer">
		<literal field="name">-</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="not" priority="220" class="unary,result-producer">
		<literal field="name">!</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="bitwise-not" priority="220" class="unary,result-producer">
		<literal field="name">~</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="pre-increment" priority="220" class="unary,statement-content,result-producer">
		<literal field="name">++</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="pre-decrement" priority="220" class="unary,statement-content,result-producer">
		<literal field="name">--</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="post-increment" priority="230" class="unary,statement-content,result-producer">
		<result-producer field="operand" />
		<literal field="name">++</literal>
	</expression>
	<expression name="post-decrement" priority="230" class="unary,statement-content,result-producer">
		<result-producer field="operand" />
		<literal field="name">--</literal>
	</expression>
	<expression name="cast" priority="220" class="binary,statement-content,result-producer">
		<literal>(</literal>
		<type field="type" />
		<literal>)</literal>
		<expression-value field="value" />
	</expression>
	<expression name="parenthetic" priority="250" class="expression-value,result-producer">
		<literal>(</literal>
		<result-producer field="content" />
		<literal>)</literal>
	</expression>
	<expression name="array index" priority="250" class="binary,assignable,result-producer">
		<result-producer field="array" />
		<literal field="open-bracket">[</literal>
		<result-producer field="index" />
		<literal>]</literal>
	</expression>
	<expression name="member" priority="250" class="assignable,statement-content,result-producer">
		<result-producer field="target" />
		<literal field="dot">.</literal>
		<identifier field="name" />
		<option>
			<literal field="method">(</literal>
			<option>
				<result-producer field="parameter" />
				<repeat>
					<literal>,</literal>
					<result-producer field="parameter" />
				</repeat>
			</option>
			<literal>)</literal>
		</option>
	</expression>
	<expression name="function-invocation" priority="250" class="statement-content,result-producer">
		<identifier field="name" />
		<literal field="method">(</literal>
		<option>
			<result-producer field="parameter" />
			<repeat>
				<literal>,</literal>
				<result-producer field="parameter" />
			</repeat>
		</option>
		<literal>)</literal>
	</expression>
	<expression name="resolution" priority="240" class="result-producer">
		<result-producer field="value" />
		<literal>::</literal>
		<identifier field="member" />
	</expression>
</expresso>
