<?xml version="1.0" encoding="UTF-8"?>

<grammar>
	<sequence name="char" order="1" without="ignorable">
		<literal>&apos;</literal>
		<one-of>
			<literal name="value">&apos;</literal>
			<pattern name="value">[\x20-~]</pattern>
			<pattern name="value" tag="escaped">\\[&apos;&quot;tnrbf]</pattern>
			<pattern name="value" tag="escaped,unicode">\\u[0-9a-fA-F]{4}</pattern>
		</one-of>
		<literal>&apos;</literal>
	</sequence>
	<sequence name="string" order="1" without="ignorable">
		<literal>&quot;</literal>
		<pattern name="value">[^&quot;&#10;]*</pattern>
		<literal>&quot;</literal>
	</sequence>
	<sequence name="number" order="2">
		<option>
			<literal name="neg">-</literal>
		</option>
		<without types="ignorable">
			<one-of>
				<sequence tag="decimal">
					<pattern name="integer">[1-9][_0-9]*</pattern>
					<literal>.</literal>
					<option>
						<pattern name="fraction">[0-9][_0-9]</pattern>
					</option>
				</sequence>
				<sequence tag="decimal">
					<literal>.</literal>
					<pattern name="fraction">[0-9][_0-9]*</pattern>
				</sequence>
				<sequence tag="int">
					<pattern name="integer">[1-9][_0-9]*</pattern>
				</sequence>
				<sequence tag="int">
					<literal name="integer">0</literal>
				</sequence>
			</one-of>
			<option>
				<pattern>[eE]</pattern>
				<option>
					<literal name="exp-neg">-</literal>
				</option>
				<pattern name="exp">[1-9][_0-9]*</pattern>
			</option>
			<option>
				<pattern name="float-type">[fF]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern name="double-type">[dD]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern name="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</sequence>
	<sequence name="hex-int" order="1" without="ignorable">
		<literal name="hex">0x</literal>
		<pattern name="value">[_0-9a-fA-F]+</pattern>
		<option>
			<pattern name="long-type">[lL]</pattern>
		</option>
		<forbid>
			<pattern>[_a-zA-Z0-9]</pattern>
		</forbid>
	</sequence>
	<sequence name="octal-int" order="1" without="ignorable">
		<literal name="oct">0</literal>
		<pattern name="value">[_0-9]+</pattern>
		<option>
			<pattern name="long-type">[lL]</pattern>
			<forbid>
				<pattern>[_a-zA-Z0-9]</pattern>
			</forbid>
		</option>
	</sequence>
	<sequence name="binary-int" order="1" without="ignorable">
		<literal name="binary">0b</literal>
		<pattern name="value">[_0-9]*</pattern>
		<option>
			<pattern name="long-type">[lL]</pattern>
			<forbid>
				<pattern>[_a-zA-Z0-9]</pattern>
			</forbid>
		</option>
	</sequence>
	<one-of name="boolean" order="1">
		<literal>true</literal>
		<literal>false</literal>
	</one-of>
	<literal name="null" order="1">null</literal>

	<!-- Ignorables -->
	<sequence name="line-comment" order="0" without="ignorable" tag="ignorable">
		<literal>//</literal>
		<pattern name="content">[^\x10]*</pattern>
		<literal>&#10;</literal>
	</sequence>
	<sequence name="block-comment" ignorable="true" order="0">
		<literal>/*</literal>
		<pattern name="content">[^(*/)]*</pattern>
		<literal>*/</literal>
	</sequence>
	
	<!-- Blocks and block structures -->
	<sequence name="block" order="1">
		<literal>{</literal>
		<repeat>
			<ref name="content" />
			<option>
				<literal>;</literal>
			</option>
		</repeat>>
		<literal>}</literal>
	</sequence>
	<sequence name="synchronized-block" order="1">
		<literal>synchronized</literal>
		<literal>(</literal>
		<ref name="sync-item" />
		<literal>)</literal>
		<ref type="block" name="content" />
	</sequence>
	<sequence name="try-catch-finally" order="1">
		<literal>try</literal>
		<option>
			<literal>(</literal>
			<repeat>
				<ref name="resource" />
				<literal>;</literal>
			</repeat>
			<ref name="resource" />
			<option>
				<literal>;</literal>
			</option>
			<literal>)</literal>
		</option>
		<ref type="block" name="try" />
		<repeat>
			<literal>catch</literal>
			<literal>(</literal>
			<ref name="catch-type" />
			<literal>)</literal>
			<ref type="block" name="catch" />
		</repeat>
		<option>
			<literal>finally</literal>
			<ref type="block" name="finally" />
		</option>
	</sequence>
	<sequence name="while-loop" order="1">
		<literal name="name">while</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" tag="post-condition" />
		</one-of>
	</sequence>
	<sequence name="do-while-loop" order="1">
		<literal name="name">do</literal>
		<ref type="block" name="content" tag="pre-condition" />
		<literal>while</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
	</sequence>
	<sequence name="for-loop" order="1">
		<literal name="name">for</literal>
		<literal>(</literal>
		<option>
			<ref name="init" />
			<repeat>
				<literal>,</literal>
				<ref name="init" />
			</repeat>
		</option>
		<literal>;</literal>
		<option>
			<ref name="condition" />
		</option>
		<literal>;</literal>
		<option>
			<ref name="increment" />
			<repeat>
				<literal>,</literal>
				<ref name="increment" />
			</repeat>
		</option>
		<literal>)</literal>
		<one-of>
			<literal name="terminal">;</literal>
			<ref name="content" tag="post-condition" />
		</one-of>
	</sequence>
	<sequence name="enhanced-for-loop" order="1">
		<literal>for</literal>
		<literal>(</literal>
		<ref name="variable" />
		<literal>:</literal>
		<ref name="iterable" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" tag="post-condition"/>
		</one-of>
	</sequence>
	<sequence name="if" order="1">
		<literal>if</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" />
		</one-of>
		<repeat>
			<literal>else</literal>
			<literal>if</literal>
			<literal>(</literal>
			<ref name="condition" />
			<literal>)</literal>
			<one-of>
				<literal>;</literal>
				<ref name="content" />
			</one-of>
		</repeat>
		<option>
			<literal name="terminal">else</literal>
			<ref name="content" />
		</option>
	</sequence>
	<sequence name="switch" order="1">
		<literal>switch</literal>
		<literal>(</literal>
		<ref name="variable" />
		<literal>)</literal>
		<literal>{</literal>
		<repeat>
			<one-of>
				<option>
					<literal>case</literal>
					<ref name="case" />
				</option>
				<option>
					<literal name="default">default</literal>
				</option>
			</one-of>
			<literal>:</literal>
			<repeat>
				<forbid>
					<one-of>
						<literal>case</literal>
						<literal>default</literal>
					</one-of>
				</forbid>
				<ref />
				<literal>;</literal>
			</repeat>
		</repeat>
		<literal>}</literal>
	</sequence>
	
	<!-- Types -->
	<sequence name="identifier" order="1000">
		<pattern name="name">[_a-zA-Z][_a-zA-Z0-9]*</pattern>
	</sequence>
	<sequence name="primitive" order="998" tag="type">
		<one-of name="name">
			<literal>void</literal>
			<literal>null</literal>
			<literal>boolean</literal>
			<literal>true</literal>
			<literal>false</literal>
			<literal>char</literal>
			<literal>byte</literal>
			<literal>short</literal>
			<literal>int</literal>
			<literal>long</literal>
			<literal>float</literal>
			<literal>double</literal>
		</one-of>
	</sequence>
	<sequence name="basic-type" priority="998" default="false" tag="type">
		<repeat>
			<ref type="identifier" name="name" />
			<literal>.</literal>
		</repeat>
		<ref type="identifier" name="name" tag="final-name" />
	</sequence>
	<sequence name="array-type" priority="998" default="false" tag="type">
		<ref type="type" name="component" />
		<repeat min="1" name="dimension">
			<literal>[</literal>
			<literal>]</literal>
		</repeat>
	</sequence>
	<sequence name="type-bound" default="false">
		<one-of>
			<literal>extends</literal>
			<literal>super</literal>
		</one-of>
		<ref type="type" name="bound"/>
	</sequence>
	<sequence name="wildcard-type" priority="998" default="false" tag="type">
		<literal name="wild-card">?</literal>
		<ref type="type-bound" name="bound" />
	</sequence>
	<sequence name="bounded-type" priority="998" default="false" tag="type">
		<ref type="identifier" name="name" />
		<ref type="type-bound" name="bound" />
	</sequence>
	<sequence name="type-parameters" default="false">
		<literal>&lt;</literal>
		<repeat>
			<ref type="type" name="parameter" />
			<literal>,</literal>
		</repeat>
		<ref type="type" name="parameter" />
		<literal>&gt;</literal>
	</sequence>
	<sequence name="generic-type" priority="998" default="false" tag="type">
		<ref type="type" name="base" />
		<ref type="type-parameters" name="parameters" />
	</sequence>

	<!-- Declarations -->
	<one-of name="qualifier" default="false">
		<literal>public</literal>
		<literal>protected</literal>
		<literal>private</literal>
		<literal>default</literal>
		<literal>static</literal>
		<literal>final</literal>
		<literal>synchronized</literal>
	</one-of>
	<sequence name="variable-declaration" order="6" tag="declaration">
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<whitespace />
		<ref type="type" name="type" />
		<whitespace />
		<ref type="identifier" name="name" />
	</sequence>
	<sequence name="method-declaration" order="5" tag="declaration">
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<one-of>
			<ref type="type-parameters" name="type-parameters" />
			<whitespace />
		</one-of>
		<ref type="type" name="type" />
		<whitespace />
		<ref type="identifier" name="name" />
		<literal>(</literal>
		<repeat>
			<ref type="variable-declaration" name="parameter" />
			<literal>,</literal>
		</repeat>
		<ref type="variable-declaration" name="parameter" />
		<literal>)</literal>
		<option>
			<literal>throws</literal>
			<repeat>
				<ref type="type" name="thrown" />
				<literal>,</literal>
			</repeat>
			<ref type="type" name="thrown" />
		</option>
		<option>
			<literal>{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="class-declaration" order="5" tag="declaration">
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<whitespace />
		<one-of>
			<literal>class</literal>
			<literal>interface</literal>
		</one-of>
		<whitespace />
		<ref type="identifier" name="name" />
		<one-of>
			<ref type="type-parameters" name="type-parameters" />
			<whitespace />
		</one-of>
		<option>
			<literal>extends</literal>
			<repeat>
				<ref type="type" name="extends" />
				<literal>,</literal>
			</repeat>
			<ref type="type" name="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<ref type="type" name="implements" />
				<literal>,</literal>
			</repeat>
			<ref type="type" name="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
		<literal>}</literal>
	</sequence>
	<sequence name="type-import" default="false" tag="import">
		<literal>import</literal>
		<whitespace />
		<ref type="basic-type" name="type" />
	</sequence>
	<sequence name="static-import" default="false" tag="import">
		<literal>import</literal>
		<whitespace />
		<literal>static</literal>
		<whitespace />
		<option>
			<ref type="basic-type" name="type" />
		</option>
		<literal>.</literal>
		<ref type="identifier" name="member" />
	</sequence>
	<sequence name="java-file" default="false">
		<repeat>
			<ref type="import" name="import" />
		</repeat>
		<ref type="class-declaration" name="class" />
	</sequence>
	
	<!-- Control statements -->
	<sequence name="return" order="1">
		<literal>return</literal>
		<ref name="value" />
	</sequence>
	<sequence name="throw" order="1">
		<literal>throw</literal>
		<ref name="value" />
	</sequence>
	
	<!-- Normal operators -->
	<sequence name="constructor" order="1">
		<literal>new</literal>
		<whitespace />
		<ref type="type" name="type" />
		<literal>(</literal>
			<repeat>
				<ref name="parameter" />
				<literal>,</literal>
			</repeat>
			<ref name="parameter" />
		<literal>)</literal>
		<option>
			<literal name="anonymous">{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="array-initializer" order="1">
		<literal>new</literal>
		<whitespace />
		<ref type="type" name="type" />
		<repeat min="1">
			<literal>[</literal>
			<ref name="size" />
			<literal>]</literal>
		</repeat>
		<option>
			<literal name="valueSet">{</literal>
			<option>
				<repeat>
					<ref name="element" />
					<literal>,</literal>
				</repeat>
				<ref name="element" />
			</option>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="add-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">+=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="subtract-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">-=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="multiply-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">*=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="divide-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">/=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="modulo-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">%=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="or-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">|=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="and-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&amp;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="xor-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">^=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="left-shift-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&lt;&lt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="right-shift-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&gt;&gt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="unsigned-right-shift-assign" order="50.0100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&gt;&gt;&gt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="conditional" order="50.0110" tag="ternary">
		<ref name="condition" />
		<literal>?</literal>
		<ref name="affirmative" />
		<literal>:</literal>
		<ref name="negative" />
	</sequence>
	<sequence name="or2" order="50.0120" tag="logical,binary">
		<ref name="left" />
		<literal name="name">||</literal>
		<ref name="right" />
	</sequence>
	<sequence name="or1" order="50.0140" tag="binary">
		<ref name="left" />
		<literal name="name">|</literal>
		<ref name="right" />
	</sequence>
	<sequence name="and2" order="50.0130" tag="logical,binary">
		<ref name="left" />
		<literal name="name">&amp;&amp;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="and1" order="50.0160" tag="binary">
		<ref name="left" />
		<literal name="name">&amp;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="xor" order="50.0150" tag="logical,binary">
		<ref name="left" />
		<literal name="name">^</literal>
		<ref name="right" />
	</sequence>
	<sequence name="equal" order="50.0170" tag="logical,binary">
		<ref name="left" />
		<literal name="name">==</literal>
		<ref name="right" />
	</sequence>
	<sequence name="not-equal" order="50.0170" tag="logical,binary">
		<ref name="left" />
		<literal name="name">!=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="instanceof" order="50.0180" tag="binary">
		<ref name="left" />
		<literal name="name">instanceof</literal>
		<ref name="right" />
	</sequence>
	<sequence name="less" order="50.0180" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="less-equal" order="50.0180" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="greater" order="50.0180" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="greater-equal" order="50.0180" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="left-shift" order="50.0190" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;&lt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="right-shift" order="50.0190" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="unsigned-right-shift" order="50.0190" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;&gt;&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="add" order="50.0200" tag="binary">
		<ref name="left" />
		<literal name="name">+</literal>
		<ref name="right" />
	</sequence>
	<sequence name="subtract" order="50.0200" tag="binary">
		<ref name="left" />
		<literal name="name">-</literal>
		<ref name="right" />
	</sequence>
	<sequence name="multiply" order="50.0210" tag="binary">
		<ref name="left" />
		<literal name="name">*</literal>
		<ref name="right" />
	</sequence>
	<sequence name="divide" order="50.0210" tag="binary">
		<ref name="left" />
		<literal name="name">/</literal>
		<ref name="right" />
	</sequence>
	<sequence name="modulo" order="50.0210" tag="binary">
		<ref name="left" />
		<literal name="name">%</literal>
		<ref name="right" />
	</sequence>
	<sequence name="posit" order="50.0220" tag="unary">
		<literal name="name">+</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="negate" order="50.0220" tag="unary">
		<literal name="name">-</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="not" order="50.0220">
		<literal storeAs="name">!</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="bitwise-not" order="50.0220">
		<literal storeAs="name">~</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="pre-increment" order="50.0220" tag="unary">
		<literal name="name">++</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="pre-decrement" order="50.0220" tag="unary">
		<literal name="name">--</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="post-increment" order="50.0230" tag="unary">
		<ref name="operand" />
		<literal name="name">++</literal>
	</sequence>
	<sequence name="post-decrement" order="50.0230" tag="unary">
		<ref name="operand" />
		<literal name="name">--</literal>
	</sequence>
	<sequence name="cast" order="50.0220">
		<literal>(</literal>
		<ref name="type" type="type" />
		<literal>)</literal>
		<ref name="value" />
	</sequence>
	<sequence name="parenthetic" order="50.0250">
		<literal>(</literal>
		<ref name="content" />
		<literal>)</literal>
	</sequence>
	<sequence name="array index" order="50.0250">
		<ref name="array" />
		<literal name="open-bracket">[</literal>
		<ref name="index" />
		<literal>]</literal>
	</sequence>
	<sequence name="member" order="50.0250">
		<ref name="context" />
		<literal name="dot">.</literal>
		<ref type="identifier" name="name" />
		<option>
			<literal name="method">(</literal>
			<option>
				<ref name="parameter" />
				<repeat>
					<literal>,</literal>
					<ref name="parameter" />
				</repeat>
			</option>
			<literal>)</literal>
		</option>
	</sequence>
</grammar>
