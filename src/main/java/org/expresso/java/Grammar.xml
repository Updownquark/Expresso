<?xml version="1.0" encoding="UTF-8"?>

<grammar>
	<sequence name="char">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<without type="ignorable">
			<literal>&apos;</literal>
			<one-of>
				<literal name="value">&quot;</literal>
				<pattern name="value">[\x20-~]</pattern>
				<pattern name="value" tag="escaped">\\[&apos;&quot;tnrbf]</pattern>
				<pattern name="value" tag="escaped,unicode">\\u[0-9a-fA-F]{4}</pattern>
			</one-of>
			<literal>&apos;</literal>
		</without>
	</sequence>
	<sequence name="string">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<without type="ignorable">
			<literal>&quot;</literal>
			<up-to name="value">
				<one-of>
					<literal>&quot;</literal>
					<literal value="&#10;" />
				</one-of>
			</up-to>
			<literal>&quot;</literal>
		</without>
	</sequence>
	<sequence name="number">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<option>
			<literal name="neg">-</literal>
		</option>
		<without type="ignorable">
			<one-of>
				<sequence tag="decimal">
					<pattern name="integer">[1-9][_0-9]*</pattern>
					<literal>.</literal>
					<option>
						<pattern name="fraction">[0-9][_0-9]</pattern>
					</option>
				</sequence>
				<sequence tag="decimal">
					<literal>.</literal>
					<pattern name="fraction">[0-9][_0-9]*</pattern>
				</sequence>
				<pattern name="integer" tag="int">[1-9][_0-9]*</pattern>
				<literal name="integer" tag="int">0</literal>
			</one-of>
			<option>
				<pattern>[eE]</pattern>
				<option>
					<literal name="exp-neg">-</literal>
				</option>
				<pattern name="exp">[1-9][_0-9]*</pattern>
			</option>
			<option>
				<pattern name="float-type">[fF]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern name="double-type">[dD]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern name="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</sequence>
	<sequence name="hex-int">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<without type="ignorable">
			<literal name="hex">0x</literal>
			<pattern name="value">[_0-9a-fA-F]+</pattern>
			<option>
				<pattern name="long-type">[lL]</pattern>
			</option>
			<forbid>
				<pattern>[_a-zA-Z0-9]</pattern>
			</forbid>
		</without>
	</sequence>
	<sequence name="octal-int">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<without type="ignorable">
			<literal name="oct">0</literal>
			<pattern name="value">[_0-9]+</pattern>
			<option>
				<pattern name="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</sequence>
	<sequence name="binary-int">
		<option>
			<ref type="ignorable" name="pre-ignore" />
		</option>
		<without type="ignorable">
			<literal name="binary">0b</literal>
			<pattern name="value">[_0-9]*</pattern>
			<option>
				<pattern name="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</sequence>
	<one-of name="boolean">
		<literal>true</literal>
		<literal>false</literal>
	</one-of>
	<literal name="null" value="null" />

	<!-- Ignorables -->
	<sequence name="line-comment" tag="ignorable">
		<without type="ignorable">
			<literal>//</literal>
			<up-to name="content">
				<literal value="&#10;" />
			</up-to>
			<literal value="&#10;" />
		</without>
	</sequence>
	<sequence name="block-comment" tag="ignorable">
		<literal>/*</literal>
		<without type="ignorable">
			<up-to name="content">
				<literal>*/</literal>
			</up-to>
			<literal>*/</literal>
		</without>
	</sequence>
	
	<!-- Blocks and block structures -->
	<sequence name="block">
		<literal>{</literal>
		<repeat>
			<ref name="content" />
		</repeat>
		<literal>}</literal>
	</sequence>
	<sequence name="synchronized-block">
		<literal>synchronized</literal>
		<literal>(</literal>
		<ref name="sync-item" />
		<literal>)</literal>
		<ref type="block" name="content" />
	</sequence>
	<sequence name="try-catch-finally">
		<literal>try</literal>
		<option>
			<literal>(</literal>
			<repeat>
				<ref type="!statement" name="resource" />
				<literal>;</literal>
			</repeat>
			<ref type="!statement" name="resource" />
			<option>
				<literal>;</literal>
			</option>
			<literal>)</literal>
		</option>
		<ref type="block" name="try" />
		<repeat>
			<literal>catch</literal>
			<literal>(</literal>
			<ref name="catch-type" />
			<literal>)</literal>
			<ref type="block" name="catch" />
		</repeat>
		<option>
			<literal>finally</literal>
			<ref type="block" name="finally" />
		</option>
	</sequence>
	<sequence name="while-loop">
		<literal name="name">while</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" tag="post-condition" />
		</one-of>
	</sequence>
	<sequence name="do-while-loop">
		<literal name="name">do</literal>
		<ref type="block" name="content" tag="pre-condition" />
		<literal>while</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
	</sequence>
	<sequence name="for-loop">
		<literal name="name">for</literal>
		<literal>(</literal>
		<option>
			<ref type="!statement" name="init" />
			<repeat>
				<literal>,</literal>
				<ref type="!statement" name="init" />
			</repeat>
		</option>
		<literal>;</literal>
		<option>
			<ref type="!statement" name="condition" />
		</option>
		<literal>;</literal>
		<option>
			<ref name="increment" />
			<repeat>
				<literal>,</literal>
				<ref name="increment" />
			</repeat>
		</option>
		<literal>)</literal>
		<one-of>
			<literal name="terminal">;</literal>
			<ref name="content" tag="post-condition" />
		</one-of>
	</sequence>
	<sequence name="enhanced-for-loop">
		<literal>for</literal>
		<literal>(</literal>
		<ref name="variable" />
		<literal>:</literal>
		<ref name="iterable" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" tag="post-condition"/>
		</one-of>
	</sequence>
	<sequence name="if">
		<literal>if</literal>
		<literal>(</literal>
		<ref name="condition" />
		<literal>)</literal>
		<one-of>
			<literal>;</literal>
			<ref name="content" />
		</one-of>
		<repeat>
			<literal>else</literal>
			<literal>if</literal>
			<literal>(</literal>
			<ref name="condition" />
			<literal>)</literal>
			<one-of>
				<literal>;</literal>
				<ref name="content" />
			</one-of>
		</repeat>
		<option>
			<literal name="terminal">else</literal>
			<ref name="content" />
		</option>
	</sequence>
	<sequence name="switch">
		<literal>switch</literal>
		<literal>(</literal>
		<ref name="variable" />
		<literal>)</literal>
		<literal>{</literal>
		<repeat>
			<one-of>
				<option>
					<literal>case</literal>
					<ref name="case" />
				</option>
				<option>
					<literal name="default">default</literal>
				</option>
			</one-of>
			<literal>:</literal>
			<repeat>
				<forbid>
					<one-of>
						<literal>case</literal>
						<literal>default</literal>
					</one-of>
				</forbid>
				<ref />
			</repeat>
		</repeat>
		<literal>}</literal>
	</sequence>
	
	<!-- Types -->
	<sequence name="identifier" tag="assignable">
		<pattern name="name">[_a-zA-Z][_a-zA-Z0-9]*</pattern>
	</sequence>
	<one-of name="primitive" tag="type">
		<literal>void</literal>
		<literal>boolean</literal>
		<literal>true</literal>
		<literal>false</literal>
		<literal>char</literal>
		<literal>byte</literal>
		<literal>short</literal>
		<literal>int</literal>
		<literal>long</literal>
		<literal>float</literal>
		<literal>double</literal>
	</one-of>
	<sequence name="basic-type" priority="998" default="false" tag="type">
		<!-- Just documenting, this is in this order as opposed to having the repeat first because of var-args.  With the repeat first,
			var arg parameters were parsed with the repeat successful (identifier, then '.'), but the next identifier wasn't there, so the
			parsing failed.  This ordering fixes this problem. -->
		<ref type="identifier" name="name" tag="final-name" />
		<repeat>
			<literal>.</literal>
			<ref type="identifier" name="name" />
		</repeat>
	</sequence>
	<sequence name="array-type" priority="998" default="false" tag="type">
		<ref type="type" name="component" />
		<repeat min="1" name="dimension">
			<literal>[</literal>
			<literal>]</literal>
		</repeat>
	</sequence>
	<sequence name="type-bound" default="false">
		<one-of>
			<literal>extends</literal>
			<literal>super</literal>
		</one-of>
		<ref type="type" name="bound"/>
	</sequence>
	<sequence name="wildcard-type" priority="998" default="false" tag="type">
		<literal name="wild-card">?</literal>
		<option>
			<ref type="type-bound" name="bound" />
		</option>
	</sequence>
	<sequence name="bounded-type" priority="998" default="false" tag="type">
		<ref type="identifier" name="name" />
		<ref type="type-bound" name="bound" />
	</sequence>
	<sequence name="type-parameters" default="false">
		<literal>&lt;</literal>
		<option> <!-- This is optional for the diamond operator -->
			<ref type="type" name="parameter" />
			<repeat>
				<literal>,</literal>
				<ref type="type" name="parameter" />
			</repeat>
		</option>
		<literal>&gt;</literal>
	</sequence>
	<sequence name="generic-type" priority="998" default="false" tag="type">
		<ref type="basic-type" name="base" />
		<ref type="type-parameters" name="parameters" />
	</sequence>

	<!-- Control statements -->
	<sequence name="statement">
		<ref name="action" />
		<literal>;</literal>
	</sequence>
	<sequence name="return">
		<literal>return</literal>
		<option>
			<ref type="!statement" name="value" />
		</option>
		<literal>;</literal>
	</sequence>
	<sequence name="throw">
		<literal>throw</literal>
		<ref type="!statement" name="value" />
		<literal>;</literal>
	</sequence>
	
	<!-- Declarations -->
	<one-of name="annotation-value" default="false">
		<ref name="value" />
		<sequence>
			<literal>{</literal>
				<ref type="annotation-value" name="value-element" />
				<repeat>
					<literal>,</literal>
					<ref type="annotation-value" name="value-element" />
				</repeat>
			<literal>}</literal>
		</sequence>
	</one-of>
	<sequence name="annotations" default="false">
		<repeat>
			<literal>@</literal>
			<ref type="basic-type" name="type" />
			<option>
				<literal>(</literal>
				<one-of>
					<ref type="annotation-value" name="parameter-value" />
					<sequence>
						<ref type="identifier" name="parameter-name" />
						<literal>=</literal>
						<ref type="annotation-value" name="parameter-value" />
					</sequence>
					<repeat>
						<literal>,</literal>
						<ref type="annotation-value" name="parameter-value" />
						<sequence>
							<ref type="identifier" name="parameter-name" />
							<literal>=</literal>
							<ref type="annotation-value" name="parameter-value" />
						</sequence>
					</repeat>
				</one-of>
				<literal>)</literal>
			</option>
		</repeat>
	</sequence>
	<one-of name="qualifier" default="false">
		<literal>public</literal>
		<literal>protected</literal>
		<literal>private</literal>
		<literal>default</literal>
		<literal>abstract</literal>
		<literal>static</literal>
		<literal>final</literal>
		<literal>synchronized</literal>
	</one-of>
	<sequence name="variable-declaration" tag="declaration,assignable">
		<ref type="annotations" name="annotations" />
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<ref type="type" name="type" />
		<option>
			<literal name="var-args">...</literal>
		</option>
		<whitespace />
		<ref type="identifier" name="name" />
	</sequence>
	<sequence name="method-declaration" tag="declaration">
		<ref type="annotations" name="annotations" />
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<option>
			<ref type="type-parameters" name="type-parameters" />
		</option>
		<option>
			<ref type="type" name="type" />
			<whitespace />
		</option>
		<ref type="identifier" name="name" />
		<literal>(</literal>
			<option>
				<ref type="variable-declaration" name="parameter" />
				<repeat>
					<literal>,</literal>
					<ref type="variable-declaration" name="parameter" />
				</repeat>
			</option>
		<literal>)</literal>
		<option>
			<literal>throws</literal>
			<ref type="type" name="thrown" />
			<repeat>
				<literal>,</literal>
				<ref type="type" name="thrown" />
			</repeat>
		</option>
		<option>
			<literal>{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="class-declaration" tag="declaration">
		<ref type="annotations" name="annotations" />
		<repeat>
			<ref type="qualifier" name="qualifier" />
		</repeat>
		<one-of>
			<literal>class</literal>
			<literal>interface</literal>
		</one-of>
		<whitespace />
		<ref type="identifier" name="name" />
		<option>
			<ref type="type-parameters" name="type-parameters" />
		</option>
		<option>
			<literal>extends</literal>
			<repeat>
				<ref type="type" name="extends" />
				<literal>,</literal>
			</repeat>
			<ref type="type" name="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<ref type="type" name="implements" />
				<literal>,</literal>
			</repeat>
			<ref type="type" name="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
		<literal>}</literal>
		<option>
			<literal>;</literal>
		</option>
	</sequence>
	<sequence name="type-import" default="false" tag="import">
		<literal>import</literal>
		<whitespace />
		<ref type="basic-type" name="type" />
		<literal>;</literal>
	</sequence>
	<sequence name="static-import" default="false" tag="import">
		<literal>import</literal>
		<whitespace />
		<literal>static</literal>
		<whitespace />
		<option>
			<ref type="basic-type" name="type" />
		</option>
		<literal>.</literal>
		<ref type="identifier" name="member" />
		<literal>;</literal>
	</sequence>
	<sequence name="java-file" default="false">
		<option>
			<literal>package</literal>
			<sequence name="package">
				<repeat>
					<ref type="identifier" />
					<literal>.</literal>
				</repeat>
					<ref type="identifier" />
			</sequence>
			<literal>;</literal>
		</option>
		<repeat>
			<ref type="import" name="import" />
		</repeat>
		<repeat min="1">
			<ref type="class-declaration" name="class" />
		</repeat>
	</sequence>
	
	<!-- Normal operators -->
	<sequence name="constructor"> <!-- Invocation, not declaration -->
		<literal>new</literal>
		<whitespace />
		<ref type="type" name="type" />
		<literal>(</literal>
			<option>
				<repeat>
					<ref name="parameter" />
					<literal>,</literal>
				</repeat>
				<ref name="parameter" />
			</option>
		<literal>)</literal>
		<option>
			<literal name="anonymous-body">{</literal>
			<repeat>
				<ref name="body-content" />
			</repeat>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="lambda">
		<one-of>
			<ref type="identifier" name="parameter-name" />
			<sequence>
				<literal>(</literal>
				<option>
					<one-of>
						<sequence>
							<repeat>
								<ref type="type" name="parameter-type" />
								<ref type="identifier" name="parameter-name" />
								<literal>,</literal>
							</repeat>
							<ref type="type" name="parameter-type" />
							<ref type="identifier" name="parameter-name" />
						</sequence>
						<sequence>
							<repeat>
								<ref type="identifier" name="parameter-name" />
								<literal>,</literal>
							</repeat>
							<ref type="identifier" name="parameter-name" />
						</sequence>
					</one-of>
				</option>
				<literal>)</literal>
			</sequence>
		</one-of>
		<literal>-&gt;</literal>
		<one-of>
			<sequence name="body">
				<literal>{</literal>
				<repeat>
					<ref name="body-content" />
				</repeat>
				<literal>}</literal>
			</sequence>
			<ref name="value" />
		</one-of>
	</sequence>
	<sequence name="array-initializer">
		<literal>new</literal>
		<whitespace />
		<ref type="type" name="type" />
		<repeat min="1">
			<literal>[</literal>
			<ref name="size" />
			<literal>]</literal>
		</repeat>
		<option>
			<literal name="valueSet">{</literal>
			<option>
				<repeat>
					<ref name="element" />
					<literal>,</literal>
				</repeat>
				<ref name="element" />
			</option>
			<literal>}</literal>
		</option>
	</sequence>
	<sequence name="assign" priority="100" tag="assignment,binary">
		<ref type="assignable" name="variable" />
		<literal name="name">=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="add-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">+=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="subtract-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">-=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="multiply-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">*=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="divide-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">/=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="modulo-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">%=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="or-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">|=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="and-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&amp;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="xor-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">^=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="left-shift-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&lt;&lt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="right-shift-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&gt;&gt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="unsigned-right-shift-assign" priority="100" tag="assignment,binary">
		<ref name="variable" />
		<literal name="name">&gt;&gt;&gt;=</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="conditional" priority="110" tag="ternary">
		<ref name="condition" />
		<literal>?</literal>
		<ref name="affirmative" />
		<literal>:</literal>
		<ref name="negative" />
	</sequence>
	<sequence name="or2" priority="120" tag="logical,binary">
		<ref name="left" />
		<literal name="name">||</literal>
		<ref name="right" />
	</sequence>
	<sequence name="and2" priority="130" tag="logical,binary">
		<ref name="left" />
		<literal name="name">&amp;&amp;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="or1" priority="140" tag="binary">
		<ref name="left" />
		<literal name="name">|</literal>
		<ref name="right" />
	</sequence>
	<sequence name="xor" priority="150" tag="logical,binary">
		<ref name="left" />
		<literal name="name">^</literal>
		<ref name="right" />
	</sequence>
	<sequence name="and1" priority="160" tag="binary">
		<ref name="left" />
		<literal name="name">&amp;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="equal" priority="170" tag="logical,binary">
		<ref name="left" />
		<literal name="name">==</literal>
		<ref name="right" />
	</sequence>
	<sequence name="not-equal" priority="170" tag="logical,binary">
		<ref name="left" />
		<literal name="name">!=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="instanceof" priority="180" tag="binary">
		<ref name="left" />
		<literal name="name">instanceof</literal>
		<ref name="right" />
	</sequence>
	<sequence name="less" priority="180" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="less-equal" priority="180" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="greater" priority="180" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="greater-equal" priority="180" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;=</literal>
		<ref name="right" />
	</sequence>
	<sequence name="left-shift" priority="190" tag="binary">
		<ref name="left" />
		<literal name="name">&lt;&lt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="right-shift" priority="190" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="unsigned-right-shift" priority="190" tag="binary">
		<ref name="left" />
		<literal name="name">&gt;&gt;&gt;</literal>
		<ref name="right" />
	</sequence>
	<sequence name="add" priority="200" tag="binary">
		<ref name="left" />
		<literal name="name">+</literal>
		<ref name="right" />
	</sequence>
	<sequence name="subtract" priority="200" tag="binary">
		<ref name="left" />
		<literal name="name">-</literal>
		<ref name="right" />
	</sequence>
	<sequence name="multiply" priority="210" tag="binary">
		<ref name="left" />
		<literal name="name">*</literal>
		<ref name="right" />
	</sequence>
	<sequence name="divide" priority="210" tag="binary">
		<ref name="left" />
		<literal name="name">/</literal>
		<ref name="right" />
	</sequence>
	<sequence name="modulo" priority="210" tag="binary">
		<ref name="left" />
		<literal name="name">%</literal>
		<ref name="right" />
	</sequence>
	<sequence name="posit" priority="220" tag="unary">
		<literal name="name">+</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="negate" priority="220" tag="unary">
		<literal name="name">-</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="not" priority="220" tag="unary">
		<literal name="name">!</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="bitwise-not" priority="220" tag="unary">
		<literal name="name">~</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="pre-increment" priority="220" tag="unary">
		<literal name="name">++</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="pre-decrement" priority="220" tag="unary">
		<literal name="name">--</literal>
		<ref name="operand" />
	</sequence>
	<sequence name="post-increment" priority="230" tag="unary">
		<ref name="operand" />
		<literal name="name">++</literal>
	</sequence>
	<sequence name="post-decrement" priority="230" tag="unary">
		<ref name="operand" />
		<literal name="name">--</literal>
	</sequence>
	<sequence name="cast" priority="220" tag="binary">
		<literal>(</literal>
		<ref name="type" type="type" />
		<literal>)</literal>
		<ref name="value" />
	</sequence>
	<sequence name="parenthetic" priority="250">
		<literal>(</literal>
		<ref name="content" />
		<literal>)</literal>
	</sequence>
	<sequence name="array index" priority="250" tag="binary,assignable">
		<ref name="array" />
		<literal name="open-bracket">[</literal>
		<ref name="index" />
		<literal>]</literal>
	</sequence>
	<sequence name="member" priority="250" tag="assignable">
		<ref name="name" />
		<literal name="dot">.</literal>
		<ref type="identifier" name="name" />
		<option>
			<literal name="method">(</literal>
			<option>
				<ref name="parameter" />
				<repeat>
					<literal>,</literal>
					<ref name="parameter" />
				</repeat>
			</option>
			<literal>)</literal>
		</option>
	</sequence>
	<sequence name="function-invocation" priority="250">
		<ref type="identifier" name="name" />
		<literal name="method">(</literal>
		<option>
			<ref name="parameter" />
			<repeat>
				<literal>,</literal>
				<ref name="parameter" />
			</repeat>
		</option>
		<literal>)</literal>
	</sequence>
</grammar>
