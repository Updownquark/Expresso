<?xml version="1.0" encoding="UTF-8"?>

<expresso>
	<classes>
		<class name="result-producer" />
		<!--<super-class name="operator" extends="result-producer">
			<sub-class name="member-operator" />
			<sub-class name="postfix-operator" />
			<sub-class name="prefix-operator" />
			<sub-class name="multiplicative-operator" />
			<sub-class name="additive-operator" />
			<sub-class name="shift-operator" />
			<sub-class name="relational-operator" />
			<sub-class name="equality-operator" />
			<sub-class name="bitwise-operator" />
			<sub-class name="logical-operator" />
			<sub-class name="conditional-operator" />
			<sub-class name="assignment-operator" />
		</super-class>
		<class name="member-operator" />
		<class name="postfix-operator" extends="unary" />
		<class name="prefix-operator" extends="unary" />
		<class name="multiplicative-operator" extends="binary" />
		<class name="additive-operator" extends="binary" />
		<class name="shift-operator" extends="binary" />
		<class name="relational-operator" extends="binary" />
		<class name="equality-operator" extends="binary,logical" />
		<class name="bitwise-operator" extends="binary" />
		<class name="logical-operator" extends="binary,logical" />
		<class name="conditional-operator" extends="ternary" />
		<class name="assignment-operator" extends="binary,assignment" />-->

		<class name="operator" />
		<class name="member-operator" extends="operator" />
		<class name="postfix-operator" extends="operator,unary" />
		<class name="prefix-operator" extends="operator,unary" />
		<class name="multiplicative-operator" extends="operator,binary" />
		<class name="additive-operator" extends="operator,binary" />
		<class name="shift-operator" extends="operator,binary" />
		<class name="relational-operator" extends="operator,binary" />
		<class name="equality-operator" extends="operator,binary,logical" />
		<class name="bitwise-operator" extends="operator,binary" />
		<class name="logical-operator" extends="operator,binary,logical" />
		<class name="conditional-operator" extends="operator,ternary" />
		<class name="assignment-operator" extends="operator,binary,assignment" />-->

		<class name="literal-value" extends="result-producer" />
		<class name="literal-number" extends="literal-value" />
		<class name="comment" extends="ignorable" />
		<class name="body-content" />
		<class name="statement-content" />
		<class name="control-statement" extends="body-content" />
		<class name="linear-control-statement" extends="control-statement" />
		<class name="loop" extends="control-statement" />
		<class name="terminal-statement" extends="body-content" />
		<class name="assignable" />
		<class name="assignment" extends="statement-content" />
		<class name="type" />
		<class name="declarable-type" extends="type" />
		<class name="concrete-type" extends="declarable-type" />
		<class name="class-content" extends="body-content" />
		<class name="declaration" extends="class-content" />
		<class name="file-content" />
		<class name="import" extends="file-content" />
		<class name="unary" />
		<class name="binary" />
		<class name="ternary" />
		<class name="logical" />
	</classes>
	<expression name="char" class="literal-value">
		<literal>&apos;</literal>
		<without types="ignorable">
			<one-of>
				<literal field="value">&quot;</literal>
				<pattern field="value">[\x20-~]</pattern>
				<pattern field="value,escaped">\\[&apos;&quot;tnrbf]</pattern>
				<pattern field="value,escaped,unicode">\\u[0-9a-fA-F]{4}</pattern>
			</one-of>
			<literal>&apos;</literal>
		</without>
	</expression>
	<expression name="string" class="literal-value">
		<literal>&quot;</literal>
		<without types="ignorable">
			<repeat field="content">
				<one-of>
					<literal field="escaped-quote">\"</literal>
					<sequence field="unicode-character">
						<literal>\u</literal>
						<pattern field="char-code">[0-9a-fA-F]{4}</pattern>
					</sequence>
					<sequence field="special-character">
						<literal>\</literal>
						<pattern field="char-code">[a-z]</pattern>
					</sequence>
					<sequence field="escaped-character">
						<literal>\</literal>
						<pattern field="character">["\\]</pattern>
					</sequence>
					<pattern field="content">[^"\\]+</pattern>
				</one-of>
			</repeat>
			<literal>&quot;</literal>
		</without>
	</expression>
	<expression name="number" class="literal-number">
		<option>
			<ignorable field="pre-ignore" />
		</option>
		<option>
			<literal field="neg">-</literal>
		</option>
		<without types="ignorable">
			<one-of>
				<sequence field="decimal">
					<pattern field="integer">[1-9][_0-9]*</pattern>
					<literal>.</literal>
					<option>
						<pattern field="fraction">[0-9][_0-9]</pattern>
					</option>
				</sequence>
				<sequence field="decimal">
					<literal>.</literal>
					<pattern field="fraction">[0-9][_0-9]*</pattern>
				</sequence>
				<pattern field="integer">[1-9][_0-9]*</pattern>
				<literal field="integer">0</literal>
			</one-of>
			<option>
				<pattern>[eE]</pattern>
				<option>
					<literal field="exp-neg">-</literal>
				</option>
				<pattern field="exp">[1-9][_0-9]*</pattern>
			</option>
			<option>
				<pattern field="float-type">[fF]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern field="double-type">[dD]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="hex-int" class="literal-number">
		<literal field="hex">0x</literal>
		<without types="ignorable">
			<pattern field="value">[_0-9a-fA-F]+</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
			</option>
			<forbid>
				<pattern>[_a-zA-Z0-9]</pattern>
			</forbid>
		</without>
	</expression>
	<expression name="octal-int" class="literal-number">
		<literal field="oct">0</literal>
		<without types="ignorable">
			<pattern field="value">[_0-9]+</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="binary-int" class="literal-number">
		<literal field="binary">0b</literal>
		<without types="ignorable">
			<pattern field="value">[_0-9]*</pattern>
			<option>
				<pattern field="long-type">[lL]</pattern>
				<forbid>
					<pattern>[_a-zA-Z0-9]</pattern>
				</forbid>
			</option>
		</without>
	</expression>
	<expression name="boolean" class="literal-value">
		<one-of>
			<literal>true</literal>
			<literal>false</literal>
		</one-of>
	</expression>
	<expression name="null">
		<literal>null</literal>
	</expression>

	<!-- Ignorables -->
	<expression name="whitespace" class="ignorable">
		<pattern>\s+</pattern>
	</expression>
	<expression name="line-comment" class="comment">
		<without types="ignorable">
			<literal>//</literal>
			<up-to field="content">
				<literal>&#10;</literal>
			</up-to>
			<literal>&#10;</literal>
		</without>
	</expression>
	<expression name="block-comment" class="comment">
		<literal>/*</literal>
		<without types="ignorable">
			<up-to field="content">
				<literal>*/</literal>
			</up-to>
		</without>
	</expression>
	
	<!-- Blocks and block structures -->
	<expression name="block" class="body-content">
		<literal>{</literal>
		<repeat>
			<body-content field="content" />
		</repeat>
		<literal>}</literal>
	</expression>
	<expression name="synchronized-block" class="body-content">
		<literal>synchronized</literal>
		<literal>(</literal>
		<result-producer field="sync-item" />
		<literal>)</literal>
		<block field="content" />
	</expression>
	<expression name="try-catch-finally" class="body-content">
		<literal>try</literal>
		<option>
			<literal>(</literal>
			<result-producer field="resource" />
			<repeat>
				<literal>;</literal>
				<result-producer field="resource" />
			</repeat>
			<option>
				<literal>;</literal>
			</option>
			<literal>)</literal>
		</option>
		<block field="try" />
		<repeat>
			<literal>catch</literal>
			<literal>(</literal>
			<statement field="catch-type" />
			<literal>)</literal>
			<block field="catch" />
		</repeat>
		<option>
			<literal>finally</literal>
			<block field="finally" />
		</option>
	</expression>
	<expression name="while-loop" class="loop">
		<literal field="name">while</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<one-of>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="do-while-loop" class="loop">
		<literal field="name">do</literal>
		<block field="content,pre-condition" />
		<literal>while</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<literal>;</literal>
	</expression>
	<expression name="for-loop" class="loop">
		<literal field="name">for</literal>
		<literal>(</literal>
		<option>
			<body-content field="init" />
			<repeat>
				<literal>,</literal>
				<body-content field="init" />
			</repeat>
		</option>
		<literal>;</literal>
		<option>
			<result-producer field="condition" />
		</option>
		<literal>;</literal>
		<option>
			<assignable field="increment" />
			<repeat>
				<literal>,</literal>
				<body-content field="increment" />
			</repeat>
		</option>
		<literal>)</literal>
		<one-of>
			<literal field="terminal">;</literal>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="enhanced-for-loop" class="loop">
		<literal>for</literal>
		<literal>(</literal>
		<type field="type" />
		<identifier field="variable" />
		<literal>:</literal>
		<result-producer field="iterable" />
		<literal>)</literal>
		<one-of>
			<statement field="content,post-condition" />
			<block field="content,post-condition" />
		</one-of>
	</expression>
	<expression name="if" class="linear-control-statement">
		<literal>if</literal>
		<literal>(</literal>
		<result-producer field="condition" />
		<literal>)</literal>
		<one-of>
			<statement field="content" />
			<block field="content" />
		</one-of>
		<repeat>
			<literal>else</literal>
			<literal>if</literal>
			<literal>(</literal>
			<result-producer field="condition" />
			<literal>)</literal>
			<one-of>
				<statement field="content" />
				<block field="content" />
			</one-of>
		</repeat>
		<option>
			<literal field="terminal">else</literal>
			<one-of>
				<statement field="content" />
				<block field="content" />
			</one-of>
		</option>
	</expression>
	<expression name="switch" class="linear-control-statement">
		<literal>switch</literal>
		<literal>(</literal>
		<result-producer field="variable" />
		<literal>)</literal>
		<literal>{</literal>
		<repeat>
			<one-of>
				<option>
					<literal>case</literal>
					<result-producer field="case" />
				</option>
				<option>
					<literal field="default">default</literal>
				</option>
			</one-of>
			<literal>:</literal>
			<one-of>
				<block />
				<repeat>
					<statement />
				</repeat>
			</one-of>
		</repeat>
		<literal>}</literal>
	</expression>
	
	<!-- Types -->
	<expression name="identifier">
		<pattern field="name">[_a-zA-Z][_a-zA-Z0-9]*</pattern>
	</expression>
	<expression name="primitive" class="concrete-type">
		<one-of>
			<literal>void</literal>
			<literal>boolean</literal>
			<literal>char</literal>
			<literal>byte</literal>
			<literal>short</literal>
			<literal>int</literal>
			<literal>long</literal>
			<literal>float</literal>
			<literal>double</literal>
		</one-of>
	</expression>
	<expression name="qualified-name" priority="250" class="concrete-type,result-producer,assignable">
		<option>
			<qualified-name field="target" />
			<literal>.</literal>
		</option>
		<identifier field="name" />
	</expression>
	<expression name="array-type" priority="998" class="type">
		<type field="type"/>
		<repeat min="1" field="dimension">
			<literal>[</literal>
			<literal>]</literal>
		</repeat>
	</expression>
	<expression name="type-bound">
		<one-of>
			<literal>extends</literal>
			<literal>super</literal>
		</one-of>
		<type field="bound" />
	</expression>
	<expression name="wildcard-type" priority="998" class="type">
		<literal field="wild-card">?</literal>
		<option>
			<type-bound field="bound" />
		</option>
	</expression>
	<expression name="bounded-type" priority="998" class="type">
		<identifier field="name" />
		<type-bound field="bound" />
	</expression>
	<expression name="type-parameters">
		<literal>&lt;</literal>
		<option> <!-- This is optional for the diamond operator -->
			<type field="parameter" />
			<repeat>
				<literal>,</literal>
				<type field="parameter" />
			</repeat>
		</option>
		<literal>&gt;</literal>
	</expression>
	<expression name="generic-type" priority="998" class="declarable-type">
		<qualified-name field="base" />
		<type-parameters field="parameters" />
	</expression>

	<!-- Control statements -->
	<expression name="statement" class="body-content">
		<option>
			<statement-content field="content" />
		</option>
		<literal>;</literal>
	</expression>
	<expression name="return" class="terminal-statement">
		<literal>return</literal>
		<option>
			<result-producer field="value" />
		</option>
		<literal>;</literal>
	</expression>
	<expression name="throw" class="terminal-statement">
		<literal>throw</literal>
		<result-producer field="value" />
		<literal>;</literal>
	</expression>
	
	<!-- Declarations -->
	<expression name="annotation-value">
		<one-of>
			<result-producer field="value" />
			<sequence>
				<literal>{</literal>
					<annotation-value field="value-element" />
					<repeat>
						<literal>,</literal>
						<annotation-value field="value-element" />
					</repeat>
				<literal>}</literal>
			</sequence>
		</one-of>
	</expression>
	<expression name="annotations">
		<repeat min="1">
			<literal>@</literal>
			<qualified-name field="type" />
			<option>
				<literal>(</literal>
				<one-of>
					<annotation-value field="parameter-value" />
					<sequence>
						<identifier field="parameter-name" />
						<literal>=</literal>
						<annotation-value field="parameter-value" />
					</sequence>
					<repeat>
						<literal>,</literal>
						<annotation-value field="parameter-value" />
						<sequence>
							<identifier field="parameter-name" />
							<literal>=</literal>
							<annotation-value field="parameter-value" />
						</sequence>
					</repeat>
				</one-of>
				<literal>)</literal>
			</option>
		</repeat>
	</expression>
	<expression name="qualifier">
		<one-of>
			<literal>public</literal>
			<literal>protected</literal>
			<literal>private</literal>
			<literal>default</literal>
			<literal>abstract</literal>
			<literal>static</literal>
			<literal>final</literal>
			<literal>synchronized</literal>
		</one-of>
	</expression>
	<expression name="javadoc">
		<literal>/**</literal>
		<without types="ignorable">
			<up-to>
				<literal>*/</literal>
			</up-to>
		</without>
	</expression>
	<expression name="variable-declaration" class="declaration,assignable,statement-content">
		<option>
			<javadoc field="javadoc" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<type field="type" />
		<identifier field="name" />
		<option>
			<literal>=</literal>
			<result-producer field="init" />
		</option>
		<repeat>
			<literal>,</literal>
			<identifier field="name" />
			<option>
				<literal>=</literal>
				<result-producer field="init" />
			</option>
		</repeat>
		<literal>;</literal>
	</expression>
	<expression name="parameter-declaration">
		<option>
			<annotations field="annotations" />
		</option>
		<type field="type" />
		<option>
			<literal field="var-args">...</literal>
		</option>
		<identifier field="name" />
	</expression>
	<expression name="method-declaration" class="declaration">
		<option>
			<javadoc field="javadoc" />
		</option>
		<option>
			<annotations field="annotations" />
		</option>
		<option>
			<javadoc field="javadoc" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<type field="type" />
		<whitespace />
		<identifier field="name" />
		<literal>(</literal>
			<option>
				<parameter-declaration field="parameter" />
				<repeat>
					<literal>,</literal>
					<parameter-declaration field="parameter" />
				</repeat>
			</option>
		<literal>)</literal>
		<option>
			<literal>throws</literal>
			<type field="thrown" />
			<repeat>
				<literal>,</literal>
				<type field="thrown" />
			</repeat>
		</option>
		<one-of>
			<sequence>
				<block field="body" />
				<option>
					<literal>;</literal>
				</option>
			</sequence>
			<option>
				<literal>;</literal>
			</option>
		</one-of>
	</expression>
	<expression name="class-declaration" class="declaration,body-content,file-content">
		<option>
			<javadoc field="javadoc" />
		</option>
		<option>
			<annotations field="annotations" />
		</option>
		<option>
			<javadoc field="javadoc" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<one-of field="type">
			<literal>class</literal>
			<literal>interface</literal>
		</one-of>
		<ignorable />
		<identifier field="name" />
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<option>
			<literal>extends</literal>
			<repeat>
				<type field="extends" />
				<literal>,</literal>
			</repeat>
			<type field="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<type field="implements" />
				<literal>,</literal>
			</repeat>
			<type field="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<class-content field="content" />
			</repeat>
		<literal>}</literal>
	</expression>
	<expression name="enum-declaration" class="declaration,body-content,file-content">
		<option>
			<annotations field="annotations" />
		</option>
		<repeat>
			<qualifier field="qualifier" />
		</repeat>
		<literal>enum</literal>
		<ignorable />
		<identifier field="name" />
		<option>
			<type-parameters field="type-parameters" />
		</option>
		<option>
			<literal>extends</literal> <!-- Not really valid on an enum, but we'll catch it in validation -->
			<repeat>
				<type field="extends" />
				<literal>,</literal>
			</repeat>
			<type field="extends" />
		</option>
		<option>
			<literal>implements</literal>
			<repeat>
				<type field="implements" />
				<literal>,</literal>
			</repeat>
			<type field="implements" />
		</option>
		<literal>{</literal>
			<repeat>
				<identifier field="enum-constant" />
			</repeat>
			<option>
				<literal>;</literal>
			</option>
			<repeat>
				<class-content field="content" />
			</repeat>
		<literal>}</literal>
	</expression>
	<expression name="type-import" class="import">
		<literal>import</literal>
		<whitespace />
		<qualified-name field="type" />
		<option>
			<literal field="wildcard">.*</literal>
		</option>
		<literal>;</literal>
	</expression>
	<expression name="static-import" class="import">
		<literal>import</literal>
		<whitespace />
		<literal>static</literal>
		<whitespace />
		<qualified-name field="type" />
		<option>
			<literal field="wildcard">.*</literal>
		</option>
		<literal>;</literal>
	</expression>
	<expression name="java-file">
		<option>
			<literal>package</literal>
			<sequence field="package">
				<repeat>
					<identifier />
					<literal>.</literal>
				</repeat>
					<identifier />
			</sequence>
			<literal>;</literal>
		</option>
		<repeat>
			<file-content field="content" />
		</repeat>
	</expression>
	
	<!-- Normal operators -->
	<expression name="argument-list">
		<option>
			<result-producer field="argument" />
			<repeat>
				<literal>,</literal>
				<result-producer field="argument" />
			</repeat>
		</option>
	</expression>
	<!-- Non-initially-recursive operators -->
	<expression name="parenthetic" priority="500" class="result-producer">
		<literal>(</literal>
		<result-producer field="content" />
		<literal>)</literal>
	</expression>
	<expression name="lambda" priority="500" class="result-producer">
		<one-of>
			<identifier field="parameter-name" />
			<sequence>
				<literal>(</literal>
				<option>
					<one-of>
						<sequence>
							<type field="parameter-type" />
							<identifier field="parameter-name" />
							<repeat>
								<literal>,</literal>
								<type field="parameter-type" />
								<identifier field="parameter-name" />
							</repeat>
						</sequence>
						<sequence>
							<identifier field="parameter-name" />
							<repeat>
								<literal>,</literal>
								<identifier field="parameter-name" />
							</repeat>
						</sequence>
					</one-of>
				</option>
				<literal>)</literal>
			</sequence>
		</one-of>
		<literal>-&gt;</literal>
		<one-of>
			<block field="body" />
			<result-producer field="value" />
		</one-of>
	</expression>
	<expression name="constructor" priority="500" class="statement-content,result-producer"> <!-- Invocation, not declaration -->
		<literal>new</literal>
		<repeat min="1">
			<ignorable />
		</repeat>
		<type field="type" />
		<literal>(</literal>
		<argument-list field="arguments" />
		<literal>)</literal>
		<option>
			<block field="anonymous-body" />
		</option>
	</expression>
	<expression name="array-initializer" priority="500" class="result-producer">
		<literal>new</literal>
		<repeat min="1">
			<ignorable />
		</repeat>
		<type field="type" />
		<repeat min="1">
			<literal>[</literal>
			<result-producer field="size" />
			<literal>]</literal>
		</repeat>
		<option>
			<literal field="valueSet">{</literal>
			<argument-list field="elements" />
			<literal>}</literal>
		</option>
	</expression>
	<expression name="function-invocation" priority="400" class="statement-content,result-producer">
		<identifier field="name" />
		<literal field="method">(</literal>
		<argument-list field="arguments" />
		<literal>)</literal>
	</expression>
	<!-- Initially-recursive operators -->
	<expression name="array-element" class="member-operator,assignable">
		<result-producer field="array" />
		<literal field="open-bracket">[</literal>
		<result-producer field="index" />
		<literal>]</literal>
	</expression>
	<expression name="field-ref" priority="250" class="member-operator,assignable">
		<one-of field="target">
			<result-producer field="value" />
			<concrete-type field="type" />
		</one-of>
		<literal>.</literal>
		<identifier field="name" />
	</expression>
	<expression name="method" priority="250" class="member-operator,statement-content">
		<one-of field="target">
			<result-producer field="value" />
			<concrete-type field="type" />
		</one-of>
		<literal>.</literal>
		<function-invocation field="method" />
	</expression>
	<expression name="resolution" priority="240" class="member-operator">
		<result-producer field="target" />
		<literal>::</literal>
		<identifier field="name" />
	</expression>
	<expression name="post-increment" priority="230" class="postfix-operator,assignment">
		<result-producer field="operand" />
		<literal field="name">++</literal>
	</expression>
	<expression name="post-decrement" priority="230" class="postfix-operator,assignment">
		<result-producer field="operand" />
		<literal field="name">--</literal>
	</expression>
	<expression name="pre-increment" priority="220" class="prefix-operator,assignment">
		<literal field="name">++</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="pre-decrement" priority="220" class="prefix-operator,assignment">
		<literal field="name">--</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="posit" priority="220" class="prefix-operator">
		<literal field="name">+</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="negate" priority="220" class="prefix-operator">
		<literal field="name">-</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="not" priority="220" class="prefix-operator">
		<literal field="name">!</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="bitwise-not" priority="220" class="prefix-operator">
		<literal field="name">~</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="cast" priority="220" class="prefix-operator">
		<literal>(</literal>
		<type field="type" />
		<literal>)</literal>
		<result-producer field="value" />
	</expression>
	<expression name="multiply" priority="210" class="multiplicative-operator">
		<result-producer field="left" />
		<literal field="name">*</literal>
		<result-producer field="right" />
	</expression>
	<expression name="divide" priority="210" class="multiplicative-operator">
		<result-producer field="left" />
		<literal field="name">/</literal>
		<result-producer field="right" />
	</expression>
	<expression name="modulo" priority="210" class="multiplicative-operator">
		<result-producer field="left" />
		<literal field="name">%</literal>
		<result-producer field="right" />
	</expression>
	<expression name="add" priority="200" class="additive-operator">
		<result-producer field="left" />
		<literal field="name">+</literal>
		<result-producer field="right" />
	</expression>
	<expression name="subtract" priority="200" class="additive-operator">
		<result-producer field="left" />
		<literal field="name">-</literal>
		<result-producer field="right" />
	</expression>
	<expression name="left-shift" priority="190" class="shift-operator">
		<result-producer field="left" />
		<literal field="name">&lt;&lt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="right-shift" priority="190" class="shift-operator">
		<result-producer field="left" />
		<literal field="name">&gt;&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="unsigned-right-shift" priority="190" class="shift-operator">
		<result-producer field="left" />
		<literal field="name">&gt;&gt;&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="instanceof" priority="180" class="relational-operator">
		<result-producer field="left" />
		<literal field="name">instanceof</literal>
		<result-producer field="right" />
	</expression>
	<expression name="less-equal" priority="180" class="relational-operator">
		<result-producer field="left" />
		<literal field="name">&lt;=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="less" priority="180" class="relational-operator">
		<result-producer field="left" />
		<literal field="name">&lt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="greater-equal" priority="180" class="relational-operator">
		<result-producer field="left" />
		<literal field="name">&gt;=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="greater" priority="180" class="relational-operator">
		<result-producer field="left" />
		<literal field="name">&gt;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="equal" priority="170" class="equality-operator,logical">
		<result-producer field="left" />
		<literal field="name">==</literal>
		<result-producer field="right" />
	</expression>
	<expression name="not-equal" priority="170" class="equality-operator,logical">
		<result-producer field="left" />
		<literal field="name">!=</literal>
		<result-producer field="right" />
	</expression>
	<expression name="bitwise-and" priority="160" class="bitwise-operator">
		<result-producer field="left" />
		<literal field="name">&amp;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="xor" priority="150" class="bitwise-operator,logical">
		<result-producer field="left" />
		<literal field="name">^</literal>
		<result-producer field="right" />
	</expression>
	<expression name="bitwise-or" priority="140" class="bitwise-operator">
		<result-producer field="left" />
		<literal field="name">|</literal>
		<result-producer field="right" />
	</expression>
	<expression name="logical-and" priority="130" class="logical-operator">
		<result-producer field="left" />
		<literal field="name">&amp;&amp;</literal>
		<result-producer field="right" />
	</expression>
	<expression name="logical-or" priority="120" class="logical-operator">
		<result-producer field="left" />
		<literal field="name">||</literal>
		<result-producer field="right" />
	</expression>
	<expression name="conditional" priority="110" class="conditional-operator">
		<result-producer field="condition" />
		<literal>?</literal>
		<result-producer field="affirmative" />
		<literal>:</literal>
		<result-producer field="negative" />
	</expression>
	<expression name="assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="add-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">+=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="subtract-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">-=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="multiply-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">*=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="divide-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">/=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="modulo-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">%=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="or-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">|=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="and-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">&amp;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="xor-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">^=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="left-shift-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">&lt;&lt;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="right-shift-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">&gt;&gt;=</literal>
		<result-producer field="operand" />
	</expression>
	<expression name="unsigned-right-shift-assign" priority="100" class="assignment-operator">
		<assignable field="variable" />
		<literal field="name">&gt;&gt;&gt;=</literal>
		<result-producer field="operand" />
	</expression>
</expresso>
